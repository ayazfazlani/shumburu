<?php

namespace App\Models {

  /**
   * App\Models\Customer
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string|null $address
   * @property string|null $email
   * @property string|null $phone
   * @property string|null $contact_person
   * @property string $name
   * @property string $code
   * @property int $id
   * @property-read mixed $display_name
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionOrder> $productionOrders
   * @property-read int|null $productionOrders_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Delivery> $deliveries
   * @property-read int|null $deliveries_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
   * @property-read int|null $payments_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\FinishedGood> $finishedGoods
   * @property-read int|null $finishedGoods_count
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereContactPerson($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer query()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Customer|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Customer|null first(array|string $columns)
   * @method static Customer firstOrFail(array|string $columns, string|null $message)
   * @method static Customer sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Customer>|Customer tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Customer extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Delivery
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $delivered_by
   * @property \Illuminate\Support\Carbon $delivery_date
   * @property decimal:2 $total_amount
   * @property decimal:2 $unit_price
   * @property string $batch_number
   * @property decimal:2 $quantity
   * @property mixed $product_id
   * @property mixed $customer_id
   * @property mixed $production_order_id
   * @property int $id
   * @property-read \App\Models\ProductionOrder $productionOrder
   * @property-read \App\Models\Customer $customer
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\User $deliveredBy
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
   * @property-read int|null $payments_count
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereProductionOrderId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereCustomerId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereBatchNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereUnitPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereTotalAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereDeliveryDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereDeliveredBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery query()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Delivery|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Delivery|null first(array|string $columns)
   * @method static Delivery firstOrFail(array|string $columns, string|null $message)
   * @method static Delivery sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Delivery>|Delivery tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Delivery extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Department
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property string $code
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
   * @property-read int|null $users_count
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department query()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Department|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Department|null first(array|string $columns)
   * @method static Department firstOrFail(array|string $columns, string|null $message)
   * @method static Department sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Department extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DowntimeRecord
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $recorded_by
   * @property string $reason
   * @property mixed $duration_minutes
   * @property string $end_time
   * @property string $start_time
   * @property string $downtime_date
   * @property int $id
   * @property-read \App\Models\User $recordedBy
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereDowntimeDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereStartTime($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereEndTime($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereDurationMinutes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereRecordedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord query()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static DowntimeRecord|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord clone()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static DowntimeRecord|null first(array|string $columns)
   * @method static DowntimeRecord firstOrFail(array|string $columns, string|null $message)
   * @method static DowntimeRecord sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<DowntimeRecord>|DowntimeRecord tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DowntimeRecord extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\FinishedGood
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $produced_by
   * @property mixed $customer_id
   * @property mixed $purpose
   * @property \Illuminate\Support\Carbon $production_date
   * @property string $batch_number
   * @property string|null $stripe_color
   * @property float|null $ovality
   * @property float|null $thickness
   * @property string|null $surface
   * @property string|null $size
   * @property float|null $total_weight
   * @property decimal:2 $quantity
   * @property float|null $outer_diameter
   * @property float $length_m
   * @property mixed $type
   * @property mixed $product_id
   * @property int $id
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\Customer $customer
   * @property-read \App\Models\User $producedBy
   * @property-read \App\Models\MaterialStockOutLine $materialStockOutLine
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOutLine> $materialStockOutLines
   * @property-read int|null $materialStockOutLines_count
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereLengthM($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereOuterDiameter($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereTotalWeight($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereSize($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereSurface($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereThickness($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereOvality($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereStripeColor($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereBatchNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereProductionDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood wherePurpose($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereCustomerId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereProducedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood query()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static FinishedGood|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood clone()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static FinishedGood|null first(array|string $columns)
   * @method static FinishedGood firstOrFail(array|string $columns, string|null $message)
   * @method static FinishedGood sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGood>|FinishedGood tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class FinishedGood extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\FinishedGoodMaterialStockOutLine
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float|null $quantity_used
   * @property mixed $material_stock_out_line_id
   * @property mixed $finished_good_id
   * @property int $id
   * @property-read \App\Models\FinishedGood $finishedGood
   * @property-read \App\Models\MaterialStockOutLine $materialStockOutLine
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereFinishedGoodId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereMaterialStockOutLineId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereQuantityUsed($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine query()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static FinishedGoodMaterialStockOutLine|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine clone()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static FinishedGoodMaterialStockOutLine|null first(array|string $columns)
   * @method static FinishedGoodMaterialStockOutLine firstOrFail(array|string $columns, string|null $message)
   * @method static FinishedGoodMaterialStockOutLine sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<FinishedGoodMaterialStockOutLine>|FinishedGoodMaterialStockOutLine tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class FinishedGoodMaterialStockOutLine extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\MaterialStockIn
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $received_by
   * @property \Illuminate\Support\Carbon $received_date
   * @property string $batch_number
   * @property decimal:3 $quantity
   * @property mixed $raw_material_id
   * @property int $id
   * @property-read \App\Models\RawMaterial $rawMaterial
   * @property-read \App\Models\User $receivedBy
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereRawMaterialId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereBatchNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereReceivedDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereReceivedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn query()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static MaterialStockIn|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn clone()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static MaterialStockIn|null first(array|string $columns)
   * @method static MaterialStockIn firstOrFail(array|string $columns, string|null $message)
   * @method static MaterialStockIn sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockIn>|MaterialStockIn tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class MaterialStockIn extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\MaterialStockOut
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $status
   * @property mixed $issued_by
   * @property \Illuminate\Support\Carbon $issued_date
   * @property string $batch_number
   * @property decimal:3 $quantity
   * @property mixed $raw_material_id
   * @property int $id
   * @property-read \App\Models\RawMaterial $rawMaterial
   * @property-read \App\Models\User $issuedBy
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionLine> $productionLines
   * @property-read int|null $productionLines_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOutLine> $MaterialStockOutLine
   * @property-read int|null $MaterialStockOutLine_count
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereRawMaterialId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereBatchNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereIssuedDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereIssuedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut query()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static MaterialStockOut|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut clone()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static MaterialStockOut|null first(array|string $columns)
   * @method static MaterialStockOut firstOrFail(array|string $columns, string|null $message)
   * @method static MaterialStockOut sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOut>|MaterialStockOut tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class MaterialStockOut extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\MaterialStockOutLine
   *
   * @property string|null $shift
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $quantity_consumed
   * @property mixed $production_line_id
   * @property mixed $material_stock_out_id
   * @property int $id
   * @property-read \App\Models\MaterialStockOut $materialStockOut
   * @property-read \App\Models\ProductionLine $productionLine
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ScrapWaste> $scrapWastes
   * @property-read int|null $scrapWastes_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\FinishedGood> $finishedGoods
   * @property-read int|null $finishedGoods_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOutLine> $materialStockOutLines
   * @property-read int|null $materialStockOutLines_count
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereMaterialStockOutId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereProductionLineId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereQuantityConsumed($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereShift($value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine query()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static MaterialStockOutLine|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine clone()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static MaterialStockOutLine|null first(array|string $columns)
   * @method static MaterialStockOutLine firstOrFail(array|string $columns, string|null $message)
   * @method static MaterialStockOutLine sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<MaterialStockOutLine>|MaterialStockOutLine tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class MaterialStockOutLine extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\OrderItem
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property decimal:2 $total_price
   * @property decimal:2 $unit_price
   * @property string $unit
   * @property decimal:2 $quantity
   * @property mixed $product_id
   * @property mixed $production_order_id
   * @property int $id
   * @property-read mixed $formatted_unit_price
   * @property-read mixed $formatted_total_price
   * @property-read mixed $formatted_quantity
   * @property-read \App\Models\ProductionOrder $productionOrder
   * @property-read \App\Models\Product $product
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereProductionOrderId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereUnit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereUnitPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereTotalPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem query()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static OrderItem|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem clone()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static OrderItem|null first(array|string $columns)
   * @method static OrderItem firstOrFail(array|string $columns, string|null $message)
   * @method static OrderItem sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<OrderItem>|OrderItem tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class OrderItem extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Payment
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $recorded_by
   * @property \Illuminate\Support\Carbon $payment_date
   * @property string|null $proforma_invoice_number
   * @property string|null $bank_slip_reference
   * @property string|null $payment_method
   * @property decimal:2 $amount
   * @property mixed $customer_id
   * @property mixed $production_order_id
   * @property int $id
   * @property-read \App\Models\ProductionOrder $productionOrder
   * @property-read \App\Models\Customer $customer
   * @property-read \App\Models\User $recordedBy
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereProductionOrderId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereCustomerId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment wherePaymentMethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBankSlipReference($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereProformaInvoiceNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment wherePaymentDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereRecordedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment query()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Payment|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Payment|null first(array|string $columns)
   * @method static Payment firstOrFail(array|string $columns, string|null $message)
   * @method static Payment sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Payment extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Product
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string|null $description
   * @property decimal:2 $meter_length
   * @property float|null $weight_per_meter
   * @property string $pn
   * @property string $size
   * @property string $code
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\FinishedGood> $finishedGoods
   * @property-read int|null $finishedGoods_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionOrder> $productionOrders
   * @property-read int|null $productionOrders_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Delivery> $deliveries
   * @property-read int|null $deliveries_count
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereSize($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereWeightPerMeter($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereMeterLength($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product query()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Product|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Product|null first(array|string $columns)
   * @method static Product firstOrFail(array|string $columns, string|null $message)
   * @method static Product sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Product extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ProductionLine
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property string|null $capacity_kg_hr
   * @property mixed $max_size
   * @property mixed $min_size
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOut> $materialStockOuts
   * @property-read int|null $materialStockOuts_count
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereMinSize($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereMaxSize($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereCapacityKgHr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine query()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ProductionLine|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ProductionLine|null first(array|string $columns)
   * @method static ProductionLine firstOrFail(array|string $columns, string|null $message)
   * @method static ProductionLine sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionLine>|ProductionLine tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ProductionLine extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ProductionOrder
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $plant_manager_id
   * @property mixed $approved_by
   * @property mixed $requested_by
   * @property \Illuminate\Support\Carbon|null $delivery_date
   * @property \Illuminate\Support\Carbon|null $production_end_date
   * @property \Illuminate\Support\Carbon|null $production_start_date
   * @property \Illuminate\Support\Carbon $requested_date
   * @property mixed $status
   * @property mixed $customer_id
   * @property string $order_number
   * @property int $id
   * @property-read mixed $total_price
   * @property-read mixed $total_quantity
   * @property-read mixed $formatted_total_price
   * @property-read \App\Models\Customer $customer
   * @property-read \App\Models\User $requestedBy
   * @property-read \App\Models\User $approvedBy
   * @property-read \App\Models\User $plantManager
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
   * @property-read int|null $payments_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Delivery> $deliveries
   * @property-read int|null $deliveries_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\OrderItem> $items
   * @property-read int|null $items_count
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereOrderNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereCustomerId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereRequestedDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereProductionStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereProductionEndDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereDeliveryDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereRequestedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereApprovedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder wherePlantManagerId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder query()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ProductionOrder|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ProductionOrder|null first(array|string $columns)
   * @method static ProductionOrder firstOrFail(array|string $columns, string|null $message)
   * @method static ProductionOrder sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ProductionOrder>|ProductionOrder tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ProductionOrder extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\QualityReport
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string|null $approved_by
   * @property string|null $checked_by
   * @property string|null $prepared_by
   * @property string|null $remarks
   * @property string|null $corrective_actions
   * @property string|null $problems
   * @property string|null $quality_comment
   * @property \Illuminate\Support\Carbon $end_date
   * @property \Illuminate\Support\Carbon $start_date
   * @property mixed $report_type
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereReportType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereEndDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereQualityComment($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereProblems($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereCorrectiveActions($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereRemarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport wherePreparedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereCheckedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereApprovedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forPeriod()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forMonth()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forDate()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport query()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static QualityReport|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport clone()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static QualityReport|null first(array|string $columns)
   * @method static QualityReport firstOrFail(array|string $columns, string|null $message)
   * @method static QualityReport sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<QualityReport>|QualityReport tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class QualityReport extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\RawMaterial
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string $unit
   * @property string|null $description
   * @property string $code
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockIn> $stockIns
   * @property-read int|null $stockIns_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOut> $stockOuts
   * @property-read int|null $stockOuts_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ScrapWaste> $scrapWaste
   * @property-read int|null $scrapWaste_count
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereUnit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial query()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static RawMaterial|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial clone()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static RawMaterial|null first(array|string $columns)
   * @method static RawMaterial firstOrFail(array|string $columns, string|null $message)
   * @method static RawMaterial sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<RawMaterial>|RawMaterial tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class RawMaterial extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ScrapWaste
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $notes
   * @property mixed $recorded_by
   * @property string $waste_date
   * @property string $reason
   * @property decimal:3 $quantity
   * @property mixed $material_stock_out_line_id
   * @property int $id
   * @property-read \App\Models\User $recordedBy
   * @property-read \App\Models\MaterialStockOutLine $materialStockOutLine
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereMaterialStockOutLineId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereWasteDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereRecordedBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste query()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ScrapWaste|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ScrapWaste|null first(array|string $columns)
   * @method static ScrapWaste firstOrFail(array|string $columns, string|null $message)
   * @method static ScrapWaste sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ScrapWaste>|ScrapWaste tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ScrapWaste extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property mixed $department_id
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property string $locale
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int $id
   * @property-read \App\Models\Department $department
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockIn> $materialStockIns
   * @property-read int|null $materialStockIns_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\MaterialStockOut> $materialStockOuts
   * @property-read int|null $materialStockOuts_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\FinishedGood> $finishedGoods
   * @property-read int|null $finishedGoods_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ScrapWaste> $scrapWaste
   * @property-read int|null $scrapWaste_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DowntimeRecord> $downtimeRecords
   * @property-read int|null $downtimeRecords_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionOrder> $requestedProductionOrders
   * @property-read int|null $requestedProductionOrders_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionOrder> $approvedProductionOrders
   * @property-read int|null $approvedProductionOrders_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProductionOrder> $managedProductionOrders
   * @property-read int|null $managedProductionOrders_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Delivery> $deliveries
   * @property-read int|null $deliveries_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
   * @property-read int|null $payments_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Role> $roles
   * @property-read int|null $roles_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Permission> $permissions
   * @property-read int|null $permissions_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLocale($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDepartmentId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User role()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User withoutRole()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User permission()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User withoutPermission()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static User|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static User|null first(array|string $columns)
   * @method static User firstOrFail(array|string $columns, string|null $message)
   * @method static User sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

}